# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
#  server:
#    build:
#      context: .
#      target: final
#    ports:
#      - 50052:50052
#    environment:
#      OUT_DIR: "/usr/local/proto/"
#    env_file: .env
#    depends_on:
#      banshee_redis:
#        condition: service_healthy
#      banshee_mysql:
#        condition: service_healthy
  banshee_redis:
    platform: linux/amd64
    build: ./Docker/config/redis
    #image: redis:alpine
    container_name: banshee_redis
    env_file: .env
    restart: always
    ports:
      - 6379:6379
    logging:
      driver: "none"
    environment:
      REDIS_PASSWORD: "Pass:123"
    volumes:
      - ./Docker/redis:/data

  banshee_mysql:
    image: mysql:8
    restart: always
    container_name: banshee_mysql
    ports:
      - 3306:3306
    volumes:
      - ./Docker/mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: banshee
      MYSQL_USER: banshee
      MYSQL_PASSWORD: Pass:123
      MYSQL_ROOT_PASSWORD: Pass123
  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

